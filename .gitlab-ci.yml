# .gitlab-ci.yml
#
# scontracts-waterfall
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image


stages:
    - build
    - test

variables:
  GIT_STRATEGY:                    fetch
  GIT_SUBMODULE_STRATEGY:          recursive
  GIT_DEPTH:                       3
  CARGO_INCREMENTAL:               0
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts


.docker-env:                       &docker-env
  image:                           ${REGISTRY}/contracts-ci-linux:latest
  before_script:
    - rustup show
    - cargo --version
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  dependencies:                    []
  interruptible:                   true
  tags:
    - linux-docker

#### stage:                        build

.update-cargo-contract:            &update-cargo-contract
  # `cargo install` returns an error if there is nothing to update, so have to supress it here temporarily
  - cargo install --git https://github.com/paritytech/cargo-contract || echo $?
  - cargo contract -V

build-ink-flipper:
  stage:                           build
  <<:                              *docker-env
  script:
    - *update-cargo-contract
    - cd lib/ink/examples/lang2/flipper
    - cargo contract build
    - cargo contract generate-metadata

build-raw-incrementer:
  stage:                           build
  <<:                              *docker-env
  script:
    - cd contracts/rust/raw-incrementer
    - ./build.sh

build-restore-contract:
  stage:                           build
  <<:                              *docker-env
  script:
    - cd contracts/rust/restore-contract
    - ./build.sh

build-as-flipper:
  stage:                           build
  <<:                              *docker-env
  script:
    - cd contracts/assemblyscript/flipper
    - yarn && yarn build
    - ./build.sh
  
build-as-incrementer:
  stage:                           build
  <<:                              *docker-env
  script:
    - cd contracts/assemblyscript/incrementer
    - yarn && yarn build
    - ./build.sh


### stage:                         test

# ADD https://releases.parity.io/substrate/x86_64-debian:stretch/${VERSION}/substrate/substrate /usr/local/bin

# variables:
#   GIT_STRATEGY:                  none
#   BUCKET:                        "releases.parity.io"
#   PREFIX:                        "substrate/${ARCH}-${DOCKER_OS}"
# script:
#   - aws s3 sync ./artifacts/ s3://${BUCKET}/${PREFIX}/$(cat ./artifacts/substrate/VERSION)/
#   - echo "update objects in latest path"
#   - aws s3 sync s3://${BUCKET}/${PREFIX}/$(cat ./artifacts/substrate/VERSION)/ s3://${BUCKET}/${PREFIX}/latest/

test-on-substrate:
  stage:                           test
  <<:                              *docker-env
  variables:
    GIT_STRATEGY:                  none
  script:
    - apt update && apt install -y unzip curl
    # - curl --location --output artifacts.zip "https://gitlab.example.com/api/v4/projects/1/jobs/artifacts/master/download?job=test&job_token=$CI_JOB_TOKEN"
    # https://gitlab.parity.io/parity/substrate/-/jobs/333935/artifacts/browse/artifacts/substrate/substrate
    - echo ${CI_JOB_URL}
    - echo ${SUBSTRATE_JOB_URL}
    - echo ${SUBSTRATE_JOB_ID}
    - echo ${SUBSTRATE_COMMIT}
    - curl https://gitlab.parity.io/parity/substrate/-/jobs/${SUBSTRATE_JOB_ID}/artifacts/download --output artifacts.zip
    - unzip artifacts.zip
    - SUBSTRATE_PATH=artifacts/substrate/substrate
    - ./test.sh
  # only:
  #   - triggers
  # rules:
  #   - if:                          ${CI_PIPELINE_TRIGGERED}
  #     when:                        always
  #   - if: '$VAR =~ /pattern/'
  #     when: manual
  #   - when: on_success




###

# test-srml-contracts-waterfall:
#   stage:                           publish
  # this is the set of integration tests for srml-contracts that requires the substrate binary
  # <<:                              *docker-env
  # only:
  #   - nightly
  # script:
  #   - git submodule update --init
  #   - ./build.sh
  #   - ../artifacts/substrate/substrate purge-chain --dev -y
  #   - ../artifacts/substrate/substrate --dev
  #   - yarn && yarn test
